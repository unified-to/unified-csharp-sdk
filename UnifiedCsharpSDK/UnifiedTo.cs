
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedCsharpSDK
{
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;
    using UnifiedCsharpSDK.Models.Components;
    using UnifiedCsharpSDK.Utils;



    /// <summary>
    /// Unified.to API: One API to Rule Them All
    /// </summary>
    public interface IUnifiedTo
    {
        public IAccounting Accounting { get; }
        public ICustomer Customer { get; }
        public IInvoice Invoice { get; }
        public IPayment Payment { get; }
        public IAts Ats { get; }
        public IApplication Application { get; }
        public ICandidate Candidate { get; }
        public IDocument Document { get; }
        public IInterview Interview { get; }
        public IJob Job { get; }
        public IScorecard Scorecard { get; }
        public ICrm Crm { get; }
        public ICompany Company { get; }
        public IContact Contact { get; }
        public IDeal Deal { get; }
        public IEvent Event { get; }
        public IFile File { get; }
        public ILead Lead { get; }
        public IPipeline Pipeline { get; }
        public IEnrich Enrich { get; }
        public IPerson Person { get; }
        public IHris Hris { get; }
        public IEmployee Employee { get; }
        public IGroup Group { get; }
        public IMartech Martech { get; }
        public IList List { get; }
        public IMember Member { get; }
        public IPassthrough Passthrough { get; }
        public ITicketing Ticketing { get; }
        public INote Note { get; }
        public ITicket Ticket { get; }
        public IUc Uc { get; }
        public ICall Call { get; }
        public IUnified Unified { get; }
        public IApicall Apicall { get; }
        public IConnection Connection { get; }
        public IIntegration Integration { get; }
        public IAuth Auth { get; }
        public ILogin Login { get; }
        public IWebhook Webhook { get; }
    }
    
    public class SDKConfig
    {
        public static string[] ServerList = new string[]
        {
            "https://api.unified.to",
            "https://api-eu.unified.to",
        };
        /// Contains the list of servers available to the SDK
        public string serverUrl = "";
        public int serverIndex = 0;

        public string GetTemplatedServerDetails()
        {
            if (!String.IsNullOrEmpty(this.serverUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.serverUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.serverIndex], new Dictionary<string, string>());
        }
    }

    /// <summary>
    /// Unified.to API: One API to Rule Them All
    /// </summary>
    public class UnifiedTo: IUnifiedTo
    {
        public SDKConfig Config { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.0";
        private const string _sdkGenVersion = "2.194.1";
        private const string _openapiDocVersion = "1.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.1.0 2.194.1 1.0 Unified-csharp-sdk";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;
        public IAccounting Accounting { get; private set; }
        public ICustomer Customer { get; private set; }
        public IInvoice Invoice { get; private set; }
        public IPayment Payment { get; private set; }
        public IAts Ats { get; private set; }
        public IApplication Application { get; private set; }
        public ICandidate Candidate { get; private set; }
        public IDocument Document { get; private set; }
        public IInterview Interview { get; private set; }
        public IJob Job { get; private set; }
        public IScorecard Scorecard { get; private set; }
        public ICrm Crm { get; private set; }
        public ICompany Company { get; private set; }
        public IContact Contact { get; private set; }
        public IDeal Deal { get; private set; }
        public IEvent Event { get; private set; }
        public IFile File { get; private set; }
        public ILead Lead { get; private set; }
        public IPipeline Pipeline { get; private set; }
        public IEnrich Enrich { get; private set; }
        public IPerson Person { get; private set; }
        public IHris Hris { get; private set; }
        public IEmployee Employee { get; private set; }
        public IGroup Group { get; private set; }
        public IMartech Martech { get; private set; }
        public IList List { get; private set; }
        public IMember Member { get; private set; }
        public IPassthrough Passthrough { get; private set; }
        public ITicketing Ticketing { get; private set; }
        public INote Note { get; private set; }
        public ITicket Ticket { get; private set; }
        public IUc Uc { get; private set; }
        public ICall Call { get; private set; }
        public IUnified Unified { get; private set; }
        public IApicall Apicall { get; private set; }
        public IConnection Connection { get; private set; }
        public IIntegration Integration { get; private set; }
        public IAuth Auth { get; private set; }
        public ILogin Login { get; private set; }
        public IWebhook Webhook { get; private set; }

        public UnifiedTo(Security? security = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null)
        {
            if (serverUrl != null) {
                if (urlParams != null) {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _defaultClient = new SpeakeasyHttpClient(client);
            _securityClient = _defaultClient;
            
            if(security != null)
            {
                _securityClient = SecuritySerializer.Apply(_defaultClient, security);
            }
            
            Config = new SDKConfig()
            {
                serverUrl = _serverUrl
            };

            Accounting = new Accounting(_defaultClient, _securityClient, _serverUrl, Config);
            Customer = new Customer(_defaultClient, _securityClient, _serverUrl, Config);
            Invoice = new Invoice(_defaultClient, _securityClient, _serverUrl, Config);
            Payment = new Payment(_defaultClient, _securityClient, _serverUrl, Config);
            Ats = new Ats(_defaultClient, _securityClient, _serverUrl, Config);
            Application = new Application(_defaultClient, _securityClient, _serverUrl, Config);
            Candidate = new Candidate(_defaultClient, _securityClient, _serverUrl, Config);
            Document = new Document(_defaultClient, _securityClient, _serverUrl, Config);
            Interview = new Interview(_defaultClient, _securityClient, _serverUrl, Config);
            Job = new Job(_defaultClient, _securityClient, _serverUrl, Config);
            Scorecard = new Scorecard(_defaultClient, _securityClient, _serverUrl, Config);
            Crm = new Crm(_defaultClient, _securityClient, _serverUrl, Config);
            Company = new Company(_defaultClient, _securityClient, _serverUrl, Config);
            Contact = new Contact(_defaultClient, _securityClient, _serverUrl, Config);
            Deal = new Deal(_defaultClient, _securityClient, _serverUrl, Config);
            Event = new Event(_defaultClient, _securityClient, _serverUrl, Config);
            File = new File(_defaultClient, _securityClient, _serverUrl, Config);
            Lead = new Lead(_defaultClient, _securityClient, _serverUrl, Config);
            Pipeline = new Pipeline(_defaultClient, _securityClient, _serverUrl, Config);
            Enrich = new Enrich(_defaultClient, _securityClient, _serverUrl, Config);
            Person = new Person(_defaultClient, _securityClient, _serverUrl, Config);
            Hris = new Hris(_defaultClient, _securityClient, _serverUrl, Config);
            Employee = new Employee(_defaultClient, _securityClient, _serverUrl, Config);
            Group = new Group(_defaultClient, _securityClient, _serverUrl, Config);
            Martech = new Martech(_defaultClient, _securityClient, _serverUrl, Config);
            List = new List(_defaultClient, _securityClient, _serverUrl, Config);
            Member = new Member(_defaultClient, _securityClient, _serverUrl, Config);
            Passthrough = new Passthrough(_defaultClient, _securityClient, _serverUrl, Config);
            Ticketing = new Ticketing(_defaultClient, _securityClient, _serverUrl, Config);
            Note = new Note(_defaultClient, _securityClient, _serverUrl, Config);
            Ticket = new Ticket(_defaultClient, _securityClient, _serverUrl, Config);
            Uc = new Uc(_defaultClient, _securityClient, _serverUrl, Config);
            Call = new Call(_defaultClient, _securityClient, _serverUrl, Config);
            Unified = new Unified(_defaultClient, _securityClient, _serverUrl, Config);
            Apicall = new Apicall(_defaultClient, _securityClient, _serverUrl, Config);
            Connection = new Connection(_defaultClient, _securityClient, _serverUrl, Config);
            Integration = new Integration(_defaultClient, _securityClient, _serverUrl, Config);
            Auth = new Auth(_defaultClient, _securityClient, _serverUrl, Config);
            Login = new Login(_defaultClient, _securityClient, _serverUrl, Config);
            Webhook = new Webhook(_defaultClient, _securityClient, _serverUrl, Config);
        }
    }
}