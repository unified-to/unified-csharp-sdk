//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace UnifiedTo
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using UnifiedTo.Hooks;
    using UnifiedTo.Models.Components;
    using UnifiedTo.Models.Errors;
    using UnifiedTo.Utils;
    using UnifiedTo.Utils.Retries;

    /// <summary>
    /// Unified.to API: One API to Rule Them All
    /// </summary>
    public interface IUnifiedToSDK
    {
        public IAccounting Accounting { get; }
        public IAccount Account { get; }
        public IBalancesheet Balancesheet { get; }
        public IBill Bill { get; }
        public ICategory Category { get; }
        public IContact Contact { get; }
        public ICreditmemo Creditmemo { get; }
        public IInvoice Invoice { get; }
        public IJournal Journal { get; }
        public IOrder Order { get; }
        public IOrganization Organization { get; }
        public IProfitloss Profitloss { get; }
        public IPurchaseorder Purchaseorder { get; }
        public IReport Report { get; }
        public ISalesorder Salesorder { get; }
        public ITaxrate Taxrate { get; }
        public ITransaction Transaction { get; }
        public ITrialbalance Trialbalance { get; }
        public IAts Ats { get; }
        public IActivity Activity { get; }
        public IApplication Application { get; }
        public IApplicationstatus Applicationstatus { get; }
        public ICandidate Candidate { get; }
        public ICompany Company { get; }
        public IDocument Document { get; }
        public IInterview Interview { get; }
        public IJob Job { get; }
        public IScorecard Scorecard { get; }
        public ICalendar Calendar { get; }
        public IBusy Busy { get; }
        public IEvent Event { get; }
        public ILink Link { get; }
        public IRecording Recording { get; }
        public ICommerce Commerce { get; }
        public ICollection Collection { get; }
        public IInventory Inventory { get; }
        public IItem Item { get; }
        public ILocation Location { get; }
        public IReview Review { get; }
        public ICrm Crm { get; }
        public IDeal Deal { get; }
        public ILead Lead { get; }
        public IPipeline Pipeline { get; }
        public IEnrich Enrich { get; }
        public IPerson Person { get; }
        public IGenai Genai { get; }
        public IEmbedding Embedding { get; }
        public IModel Model { get; }
        public IPrompt Prompt { get; }
        public IHris Hris { get; }
        public IDevice Device { get; }
        public IEmployee Employee { get; }
        public IGroup Group { get; }
        public IPayslip Payslip { get; }
        public ITimeoff Timeoff { get; }
        public ITimeshift Timeshift { get; }
        public IKms Kms { get; }
        public IComment Comment { get; }
        public IPage Page { get; }
        public ISpace Space { get; }
        public ILms Lms { get; }
        public IClass Class { get; }
        public ICourse Course { get; }
        public IInstructor Instructor { get; }
        public IStudent Student { get; }
        public IMartech Martech { get; }
        public IList List { get; }
        public IMember Member { get; }
        public IMessaging Messaging { get; }
        public IChannel Channel { get; }
        public IMessage Message { get; }
        public IMetadata Metadata { get; }
        public IPassthrough Passthrough { get; }
        public IPayment Payment { get; }
        public IPayout Payout { get; }
        public IRefund Refund { get; }
        public ISubscription Subscription { get; }
        public IRepo Repo { get; }
        public IBranch Branch { get; }
        public ICommit Commit { get; }
        public IPullrequest Pullrequest { get; }
        public IRepository Repository { get; }
        public IScim Scim { get; }
        public IUser User { get; }
        public IStorage Storage { get; }
        public IFile File { get; }
        public ITask Task { get; }
        public IChange Change { get; }
        public IProject Project { get; }
        public ITicketing Ticketing { get; }
        public ICustomer Customer { get; }
        public INote Note { get; }
        public ITicket Ticket { get; }
        public IUc Uc { get; }
        public ICall Call { get; }
        public IUnified Unified { get; }
        public IApicall Apicall { get; }
        public IConnection Connection { get; }
        public IIntegration Integration { get; }
        public IAuth Auth { get; }
        public ILogin Login { get; }
        public IIssue Issue { get; }
        public IWebhook Webhook { get; }
        public IVerification Verification { get; }
        public IPackage Package { get; }
        public IRequest Request { get; }
    }


    /// <summary>
    /// Unified.to API: One API to Rule Them All
    /// </summary>
    public class UnifiedToSDK: IUnifiedToSDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.86.0";
        private const string _sdkGenVersion = "2.632.2";
        private const string _openapiDocVersion = "1.0";
        public IAccounting Accounting { get; private set; }
        public IAccount Account { get; private set; }
        public IBalancesheet Balancesheet { get; private set; }
        public IBill Bill { get; private set; }
        public ICategory Category { get; private set; }
        public IContact Contact { get; private set; }
        public ICreditmemo Creditmemo { get; private set; }
        public IInvoice Invoice { get; private set; }
        public IJournal Journal { get; private set; }
        public IOrder Order { get; private set; }
        public IOrganization Organization { get; private set; }
        public IProfitloss Profitloss { get; private set; }
        public IPurchaseorder Purchaseorder { get; private set; }
        public IReport Report { get; private set; }
        public ISalesorder Salesorder { get; private set; }
        public ITaxrate Taxrate { get; private set; }
        public ITransaction Transaction { get; private set; }
        public ITrialbalance Trialbalance { get; private set; }
        public IAts Ats { get; private set; }
        public IActivity Activity { get; private set; }
        public IApplication Application { get; private set; }
        public IApplicationstatus Applicationstatus { get; private set; }
        public ICandidate Candidate { get; private set; }
        public ICompany Company { get; private set; }
        public IDocument Document { get; private set; }
        public IInterview Interview { get; private set; }
        public IJob Job { get; private set; }
        public IScorecard Scorecard { get; private set; }
        public ICalendar Calendar { get; private set; }
        public IBusy Busy { get; private set; }
        public IEvent Event { get; private set; }
        public ILink Link { get; private set; }
        public IRecording Recording { get; private set; }
        public ICommerce Commerce { get; private set; }
        public ICollection Collection { get; private set; }
        public IInventory Inventory { get; private set; }
        public IItem Item { get; private set; }
        public ILocation Location { get; private set; }
        public IReview Review { get; private set; }
        public ICrm Crm { get; private set; }
        public IDeal Deal { get; private set; }
        public ILead Lead { get; private set; }
        public IPipeline Pipeline { get; private set; }
        public IEnrich Enrich { get; private set; }
        public IPerson Person { get; private set; }
        public IGenai Genai { get; private set; }
        public IEmbedding Embedding { get; private set; }
        public IModel Model { get; private set; }
        public IPrompt Prompt { get; private set; }
        public IHris Hris { get; private set; }
        public IDevice Device { get; private set; }
        public IEmployee Employee { get; private set; }
        public IGroup Group { get; private set; }
        public IPayslip Payslip { get; private set; }
        public ITimeoff Timeoff { get; private set; }
        public ITimeshift Timeshift { get; private set; }
        public IKms Kms { get; private set; }
        public IComment Comment { get; private set; }
        public IPage Page { get; private set; }
        public ISpace Space { get; private set; }
        public ILms Lms { get; private set; }
        public IClass Class { get; private set; }
        public ICourse Course { get; private set; }
        public IInstructor Instructor { get; private set; }
        public IStudent Student { get; private set; }
        public IMartech Martech { get; private set; }
        public IList List { get; private set; }
        public IMember Member { get; private set; }
        public IMessaging Messaging { get; private set; }
        public IChannel Channel { get; private set; }
        public IMessage Message { get; private set; }
        public IMetadata Metadata { get; private set; }
        public IPassthrough Passthrough { get; private set; }
        public IPayment Payment { get; private set; }
        public IPayout Payout { get; private set; }
        public IRefund Refund { get; private set; }
        public ISubscription Subscription { get; private set; }
        public IRepo Repo { get; private set; }
        public IBranch Branch { get; private set; }
        public ICommit Commit { get; private set; }
        public IPullrequest Pullrequest { get; private set; }
        public IRepository Repository { get; private set; }
        public IScim Scim { get; private set; }
        public IUser User { get; private set; }
        public IStorage Storage { get; private set; }
        public IFile File { get; private set; }
        public ITask Task { get; private set; }
        public IChange Change { get; private set; }
        public IProject Project { get; private set; }
        public ITicketing Ticketing { get; private set; }
        public ICustomer Customer { get; private set; }
        public INote Note { get; private set; }
        public ITicket Ticket { get; private set; }
        public IUc Uc { get; private set; }
        public ICall Call { get; private set; }
        public IUnified Unified { get; private set; }
        public IApicall Apicall { get; private set; }
        public IConnection Connection { get; private set; }
        public IIntegration Integration { get; private set; }
        public IAuth Auth { get; private set; }
        public ILogin Login { get; private set; }
        public IIssue Issue { get; private set; }
        public IWebhook Webhook { get; private set; }
        public IVerification Verification { get; private set; }
        public IPackage Package { get; private set; }
        public IRequest Request { get; private set; }

        public UnifiedToSDK(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Accounting = new Accounting(SDKConfiguration);

            Account = new Account(SDKConfiguration);

            Balancesheet = new Balancesheet(SDKConfiguration);

            Bill = new Bill(SDKConfiguration);

            Category = new Category(SDKConfiguration);

            Contact = new Contact(SDKConfiguration);

            Creditmemo = new Creditmemo(SDKConfiguration);

            Invoice = new Invoice(SDKConfiguration);

            Journal = new Journal(SDKConfiguration);

            Order = new Order(SDKConfiguration);

            Organization = new Organization(SDKConfiguration);

            Profitloss = new Profitloss(SDKConfiguration);

            Purchaseorder = new Purchaseorder(SDKConfiguration);

            Report = new Report(SDKConfiguration);

            Salesorder = new Salesorder(SDKConfiguration);

            Taxrate = new Taxrate(SDKConfiguration);

            Transaction = new Transaction(SDKConfiguration);

            Trialbalance = new Trialbalance(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Activity = new Activity(SDKConfiguration);

            Application = new Application(SDKConfiguration);

            Applicationstatus = new Applicationstatus(SDKConfiguration);

            Candidate = new Candidate(SDKConfiguration);

            Company = new Company(SDKConfiguration);

            Document = new Document(SDKConfiguration);

            Interview = new Interview(SDKConfiguration);

            Job = new Job(SDKConfiguration);

            Scorecard = new Scorecard(SDKConfiguration);

            Calendar = new Calendar(SDKConfiguration);

            Busy = new Busy(SDKConfiguration);

            Event = new Event(SDKConfiguration);

            Link = new Link(SDKConfiguration);

            Recording = new Recording(SDKConfiguration);

            Commerce = new Commerce(SDKConfiguration);

            Collection = new Collection(SDKConfiguration);

            Inventory = new Inventory(SDKConfiguration);

            Item = new Item(SDKConfiguration);

            Location = new Location(SDKConfiguration);

            Review = new Review(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Deal = new Deal(SDKConfiguration);

            Lead = new Lead(SDKConfiguration);

            Pipeline = new Pipeline(SDKConfiguration);

            Enrich = new Enrich(SDKConfiguration);

            Person = new Person(SDKConfiguration);

            Genai = new Genai(SDKConfiguration);

            Embedding = new Embedding(SDKConfiguration);

            Model = new Model(SDKConfiguration);

            Prompt = new Prompt(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Device = new Device(SDKConfiguration);

            Employee = new Employee(SDKConfiguration);

            Group = new Group(SDKConfiguration);

            Payslip = new Payslip(SDKConfiguration);

            Timeoff = new Timeoff(SDKConfiguration);

            Timeshift = new Timeshift(SDKConfiguration);

            Kms = new Kms(SDKConfiguration);

            Comment = new Comment(SDKConfiguration);

            Page = new Page(SDKConfiguration);

            Space = new Space(SDKConfiguration);

            Lms = new Lms(SDKConfiguration);

            Class = new Class(SDKConfiguration);

            Course = new Course(SDKConfiguration);

            Instructor = new Instructor(SDKConfiguration);

            Student = new Student(SDKConfiguration);

            Martech = new Martech(SDKConfiguration);

            List = new List(SDKConfiguration);

            Member = new Member(SDKConfiguration);

            Messaging = new Messaging(SDKConfiguration);

            Channel = new Channel(SDKConfiguration);

            Message = new Message(SDKConfiguration);

            Metadata = new Metadata(SDKConfiguration);

            Passthrough = new Passthrough(SDKConfiguration);

            Payment = new Payment(SDKConfiguration);

            Payout = new Payout(SDKConfiguration);

            Refund = new Refund(SDKConfiguration);

            Subscription = new Subscription(SDKConfiguration);

            Repo = new Repo(SDKConfiguration);

            Branch = new Branch(SDKConfiguration);

            Commit = new Commit(SDKConfiguration);

            Pullrequest = new Pullrequest(SDKConfiguration);

            Repository = new Repository(SDKConfiguration);

            Scim = new Scim(SDKConfiguration);

            User = new User(SDKConfiguration);

            Storage = new Storage(SDKConfiguration);

            File = new File(SDKConfiguration);

            Task = new Task(SDKConfiguration);

            Change = new Change(SDKConfiguration);

            Project = new Project(SDKConfiguration);

            Ticketing = new Ticketing(SDKConfiguration);

            Customer = new Customer(SDKConfiguration);

            Note = new Note(SDKConfiguration);

            Ticket = new Ticket(SDKConfiguration);

            Uc = new Uc(SDKConfiguration);

            Call = new Call(SDKConfiguration);

            Unified = new Unified(SDKConfiguration);

            Apicall = new Apicall(SDKConfiguration);

            Connection = new Connection(SDKConfiguration);

            Integration = new Integration(SDKConfiguration);

            Auth = new Auth(SDKConfiguration);

            Login = new Login(SDKConfiguration);

            Issue = new Issue(SDKConfiguration);

            Webhook = new Webhook(SDKConfiguration);

            Verification = new Verification(SDKConfiguration);

            Package = new Package(SDKConfiguration);

            Request = new Request(SDKConfiguration);
        }

        public UnifiedToSDK(UnifiedTo.Models.Components.Security? security = null, Func<UnifiedTo.Models.Components.Security>? securitySource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<UnifiedTo.Models.Components.Security>? _securitySource = null;

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }
            else
            {
                throw new Exception("security and securitySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Accounting = new Accounting(SDKConfiguration);

            Account = new Account(SDKConfiguration);

            Balancesheet = new Balancesheet(SDKConfiguration);

            Bill = new Bill(SDKConfiguration);

            Category = new Category(SDKConfiguration);

            Contact = new Contact(SDKConfiguration);

            Creditmemo = new Creditmemo(SDKConfiguration);

            Invoice = new Invoice(SDKConfiguration);

            Journal = new Journal(SDKConfiguration);

            Order = new Order(SDKConfiguration);

            Organization = new Organization(SDKConfiguration);

            Profitloss = new Profitloss(SDKConfiguration);

            Purchaseorder = new Purchaseorder(SDKConfiguration);

            Report = new Report(SDKConfiguration);

            Salesorder = new Salesorder(SDKConfiguration);

            Taxrate = new Taxrate(SDKConfiguration);

            Transaction = new Transaction(SDKConfiguration);

            Trialbalance = new Trialbalance(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Activity = new Activity(SDKConfiguration);

            Application = new Application(SDKConfiguration);

            Applicationstatus = new Applicationstatus(SDKConfiguration);

            Candidate = new Candidate(SDKConfiguration);

            Company = new Company(SDKConfiguration);

            Document = new Document(SDKConfiguration);

            Interview = new Interview(SDKConfiguration);

            Job = new Job(SDKConfiguration);

            Scorecard = new Scorecard(SDKConfiguration);

            Calendar = new Calendar(SDKConfiguration);

            Busy = new Busy(SDKConfiguration);

            Event = new Event(SDKConfiguration);

            Link = new Link(SDKConfiguration);

            Recording = new Recording(SDKConfiguration);

            Commerce = new Commerce(SDKConfiguration);

            Collection = new Collection(SDKConfiguration);

            Inventory = new Inventory(SDKConfiguration);

            Item = new Item(SDKConfiguration);

            Location = new Location(SDKConfiguration);

            Review = new Review(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Deal = new Deal(SDKConfiguration);

            Lead = new Lead(SDKConfiguration);

            Pipeline = new Pipeline(SDKConfiguration);

            Enrich = new Enrich(SDKConfiguration);

            Person = new Person(SDKConfiguration);

            Genai = new Genai(SDKConfiguration);

            Embedding = new Embedding(SDKConfiguration);

            Model = new Model(SDKConfiguration);

            Prompt = new Prompt(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Device = new Device(SDKConfiguration);

            Employee = new Employee(SDKConfiguration);

            Group = new Group(SDKConfiguration);

            Payslip = new Payslip(SDKConfiguration);

            Timeoff = new Timeoff(SDKConfiguration);

            Timeshift = new Timeshift(SDKConfiguration);

            Kms = new Kms(SDKConfiguration);

            Comment = new Comment(SDKConfiguration);

            Page = new Page(SDKConfiguration);

            Space = new Space(SDKConfiguration);

            Lms = new Lms(SDKConfiguration);

            Class = new Class(SDKConfiguration);

            Course = new Course(SDKConfiguration);

            Instructor = new Instructor(SDKConfiguration);

            Student = new Student(SDKConfiguration);

            Martech = new Martech(SDKConfiguration);

            List = new List(SDKConfiguration);

            Member = new Member(SDKConfiguration);

            Messaging = new Messaging(SDKConfiguration);

            Channel = new Channel(SDKConfiguration);

            Message = new Message(SDKConfiguration);

            Metadata = new Metadata(SDKConfiguration);

            Passthrough = new Passthrough(SDKConfiguration);

            Payment = new Payment(SDKConfiguration);

            Payout = new Payout(SDKConfiguration);

            Refund = new Refund(SDKConfiguration);

            Subscription = new Subscription(SDKConfiguration);

            Repo = new Repo(SDKConfiguration);

            Branch = new Branch(SDKConfiguration);

            Commit = new Commit(SDKConfiguration);

            Pullrequest = new Pullrequest(SDKConfiguration);

            Repository = new Repository(SDKConfiguration);

            Scim = new Scim(SDKConfiguration);

            User = new User(SDKConfiguration);

            Storage = new Storage(SDKConfiguration);

            File = new File(SDKConfiguration);

            Task = new Task(SDKConfiguration);

            Change = new Change(SDKConfiguration);

            Project = new Project(SDKConfiguration);

            Ticketing = new Ticketing(SDKConfiguration);

            Customer = new Customer(SDKConfiguration);

            Note = new Note(SDKConfiguration);

            Ticket = new Ticket(SDKConfiguration);

            Uc = new Uc(SDKConfiguration);

            Call = new Call(SDKConfiguration);

            Unified = new Unified(SDKConfiguration);

            Apicall = new Apicall(SDKConfiguration);

            Connection = new Connection(SDKConfiguration);

            Integration = new Integration(SDKConfiguration);

            Auth = new Auth(SDKConfiguration);

            Login = new Login(SDKConfiguration);

            Issue = new Issue(SDKConfiguration);

            Webhook = new Webhook(SDKConfiguration);

            Verification = new Verification(SDKConfiguration);

            Package = new Package(SDKConfiguration);

            Request = new Request(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithSecuritySource(Func<UnifiedTo.Models.Components.Security> securitySource)
            {
                _sdkConfig.SecuritySource = securitySource;
                return this;
            }

            public SDKBuilder WithSecurity(UnifiedTo.Models.Components.Security security)
            {
                _sdkConfig.SecuritySource = () => security;
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public UnifiedToSDK Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `Security` or `securitySource` needs to be defined.");
              }
              return new UnifiedToSDK(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}